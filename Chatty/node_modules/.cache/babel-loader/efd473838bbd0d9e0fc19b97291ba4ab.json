{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createEmotion = _interopRequireDefault(require(\"create-emotion\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _createCSSKey = _interopRequireDefault(require(\"../createCSSKey\"));\n\nvar _EventSpy = _interopRequireDefault(require(\"../EventSpy\"));\n\nvar _FunctionContext = _interopRequireDefault(require(\"./FunctionContext\"));\n\nvar _InternalContext = _interopRequireDefault(require(\"./InternalContext\"));\n\nvar _SpineTo = _interopRequireDefault(require(\"../SpineTo\"));\n\nvar _StateContext = _interopRequireDefault(require(\"./StateContext\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar MIN_CHECK_INTERVAL = 17; // 1 frame\n\nvar MODE_BOTTOM = 'bottom';\nvar MODE_TOP = 'top';\nvar NEAR_END_THRESHOLD = 1;\nvar SCROLL_DECISION_DURATION = 34; // 2 frames\n// We pool the emotion object by nonce.\n// This is to make sure we don't generate too many unneeded <style> tags.\n\nvar emotionPool = {};\n\nfunction setImmediateInterval(fn, ms) {\n  fn();\n  return setInterval(fn, ms);\n}\n\nfunction computeViewState(_ref) {\n  var mode = _ref.mode,\n      _ref$target = _ref.target,\n      offsetHeight = _ref$target.offsetHeight,\n      scrollHeight = _ref$target.scrollHeight,\n      scrollTop = _ref$target.scrollTop;\n  var atBottom = scrollHeight - scrollTop - offsetHeight < NEAR_END_THRESHOLD;\n  var atTop = scrollTop < NEAR_END_THRESHOLD;\n  var atEnd = mode === MODE_TOP ? atTop : atBottom;\n  var atStart = mode !== MODE_TOP ? atTop : atBottom;\n  return {\n    atBottom: atBottom,\n    atEnd: atEnd,\n    atStart: atStart,\n    atTop: atTop\n  };\n}\n\nfunction isEnd(scrollTop, mode) {\n  return mode === MODE_TOP && scrollTop === 0 || mode === MODE_BOTTOM && scrollTop === '100%';\n}\n\nvar Composer = function Composer(_ref2) {\n  var checkInterval = _ref2.checkInterval,\n      children = _ref2.children,\n      debounce = _ref2.debounce,\n      mode = _ref2.mode,\n      nonce = _ref2.nonce;\n  mode = mode === MODE_TOP ? MODE_TOP : MODE_BOTTOM;\n  var ignoreScrollEventBeforeRef = (0, _react.useRef)(0);\n\n  var _useState = (0, _react.useState)(mode === MODE_TOP ? 0 : '100%'),\n      _useState2 = _slicedToArray(_useState, 2),\n      scrollTop = _useState2[0],\n      setScrollTop = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      target = _useState4[0],\n      setTarget = _useState4[1]; // Internal context\n\n\n  var _useState5 = (0, _react.useState)(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      offsetHeight = _useState6[0],\n      setOffsetHeight = _useState6[1];\n\n  var _useState7 = (0, _react.useState)(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      scrollHeight = _useState8[0],\n      setScrollHeight = _useState8[1]; // State context\n\n\n  var _useState9 = (0, _react.useState)(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      animating = _useState10[0],\n      setAnimating = _useState10[1];\n\n  var _useState11 = (0, _react.useState)(true),\n      _useState12 = _slicedToArray(_useState11, 2),\n      atBottom = _useState12[0],\n      setAtBottom = _useState12[1];\n\n  var _useState13 = (0, _react.useState)(true),\n      _useState14 = _slicedToArray(_useState13, 2),\n      atEnd = _useState14[0],\n      setAtEnd = _useState14[1];\n\n  var _useState15 = (0, _react.useState)(true),\n      _useState16 = _slicedToArray(_useState15, 2),\n      atTop = _useState16[0],\n      setAtTop = _useState16[1];\n\n  var _useState17 = (0, _react.useState)(false),\n      _useState18 = _slicedToArray(_useState17, 2),\n      atStart = _useState18[0],\n      setAtStart = _useState18[1];\n\n  var _useState19 = (0, _react.useState)(true),\n      _useState20 = _slicedToArray(_useState19, 2),\n      sticky = _useState20[0],\n      setSticky = _useState20[1]; // High-rate state context\n\n\n  var scrollPositionObserversRef = (0, _react.useRef)([]);\n  var observeScrollPosition = (0, _react.useCallback)(function (fn) {\n    scrollPositionObserversRef.current.push(fn);\n    target && fn({\n      scrollTop: target.scrollTop\n    });\n    return function () {\n      var scrollPositionObservers = scrollPositionObserversRef.current;\n      var index = scrollPositionObservers.indexOf(fn);\n      ~index && scrollPositionObservers.splice(index, 1);\n    };\n  }, [scrollPositionObserversRef, target]);\n  var handleScrollEnd = (0, _react.useCallback)(function () {\n    ignoreScrollEventBeforeRef.current = Date.now();\n    setAnimating(false);\n    setScrollTop(null);\n  }, [ignoreScrollEventBeforeRef, setAnimating, setScrollTop]); // Function context\n\n  var scrollTo = (0, _react.useCallback)(function (scrollTop) {\n    var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        behavior = _ref3.behavior;\n\n    if (behavior === 'auto') {\n      // Stop any existing animation\n      handleScrollEnd(); // Jump to the scroll position\n\n      target.scrollTop = scrollTop === '100%' ? target.scrollHeight - target.offsetHeight : scrollTop;\n    } else {\n      behavior !== 'smooth' && console.warn('react-scroll-to-bottom: Please set \"behavior\" when calling \"scrollTo\". In future versions, the default behavior will be changed from smooth scrolling to discrete scrolling to align with HTML Standard.');\n      setAnimating(true);\n      setScrollTop(scrollTop);\n    }\n  }, [handleScrollEnd, setAnimating, setScrollTop, target]);\n  var scrollToBottom = (0, _react.useCallback)(function () {\n    var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        behavior = _ref4.behavior;\n\n    behavior !== 'smooth' && console.warn('react-scroll-to-bottom: Please set \"behavior\" when calling \"scrollToBottom\". In future versions, the default behavior will be changed from smooth scrolling to discrete scrolling to align with HTML Standard.');\n    scrollTo('100%', {\n      behavior: behavior || 'smooth'\n    });\n  }, [scrollTo]);\n  var scrollToTop = (0, _react.useCallback)(function () {\n    var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        behavior = _ref5.behavior;\n\n    behavior !== 'smooth' && console.warn('react-scroll-to-bottom: Please set \"behavior\" when calling \"scrollToTop\". In future versions, the default behavior will be changed from smooth scrolling to discrete scrolling to align with HTML Standard.');\n    scrollTo(0, {\n      behavior: behavior || 'smooth'\n    });\n  }, [scrollTo]);\n  var scrollToEnd = (0, _react.useCallback)(function () {\n    var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        behavior = _ref6.behavior;\n\n    behavior !== 'smooth' && console.warn('react-scroll-to-bottom: Please set \"behavior\" when calling \"scrollToEnd\". In future versions, the default behavior will be changed from smooth scrolling to discrete scrolling to align with HTML Standard.');\n    var options = {\n      behavior: behavior || 'smooth'\n    };\n    mode === MODE_TOP ? scrollToTop(options) : scrollToBottom(options);\n  }, [mode, scrollToBottom, scrollToTop]);\n  var scrollToStart = (0, _react.useCallback)(function () {\n    var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        behavior = _ref7.behavior;\n\n    behavior !== 'smooth' && console.warn('react-scroll-to-bottom: Please set \"behavior\" when calling \"scrollToStart\". In future versions, the default behavior will be changed from smooth scrolling to discrete scrolling to align with HTML Standard.');\n    var options = {\n      behavior: behavior || 'smooth'\n    };\n    mode === MODE_TOP ? scrollToBottom(options) : scrollToTop(options);\n  }, [mode, scrollToBottom, scrollToTop]);\n  (0, _react.useEffect)(function () {\n    if (sticky) {\n      var stickyButNotAtEndSince = false;\n      var timeout = setImmediateInterval(function () {\n        if (sticky && target && !computeViewState({\n          mode: mode,\n          target: target\n        }).atEnd) {\n          if (!stickyButNotAtEndSince) {\n            stickyButNotAtEndSince = Date.now();\n          } else if (Date.now() - stickyButNotAtEndSince > SCROLL_DECISION_DURATION) {\n            // Quirks: In Firefox, after user scroll down, Firefox do two things:\n            //         1. Set to a new \"scrollTop\"\n            //         2. Fire \"scroll\" event\n            //         For what we observed, #1 is fired about 20ms before #2. There is a chance that this stickyCheckTimeout is being scheduled between 1 and 2.\n            //         That means, if we just look at #1 to decide if we should scroll, we will always scroll, in oppose to the user's intention.\n            // Repro: Open Firefox, set checkInterval to a lower number, and try to scroll by dragging the scroll handler. It will jump back.\n            !animating && scrollToEnd({\n              behavior: 'smooth'\n            });\n            stickyButNotAtEndSince = false;\n          }\n        } else {\n          stickyButNotAtEndSince = false;\n        }\n      }, Math.max(MIN_CHECK_INTERVAL, checkInterval) || MIN_CHECK_INTERVAL);\n      return function () {\n        return clearInterval(timeout);\n      };\n    }\n  }, [animating, checkInterval, mode, scrollToEnd, sticky, target]);\n  var handleScroll = (0, _react.useCallback)(function (_ref8) {\n    var timeStampLow = _ref8.timeStampLow; // Currently, there are no reliable way to check if the \"scroll\" event is trigger due to\n    // user gesture, programmatic scrolling, or Chrome-synthesized \"scroll\" event to compensate size change.\n    // Thus, we use our best-effort to guess if it is triggered by user gesture, and disable sticky if it is heading towards the start direction.\n\n    if (timeStampLow <= ignoreScrollEventBeforeRef.current) {\n      // Since we debounce \"scroll\" event, this handler might be called after spineTo.onEnd (a.k.a. artificial scrolling).\n      // We should ignore debounced event fired after scrollEnd, because without skipping them, the userInitiatedScroll calculated below will not be accurate.\n      // Thus, on a fast machine, adding elements super fast will lose the \"stickiness\".\n      return;\n    }\n\n    if (target) {\n      var _computeViewState = computeViewState({\n        mode: mode,\n        target: target\n      }),\n          _atBottom = _computeViewState.atBottom,\n          _atEnd = _computeViewState.atEnd,\n          _atStart = _computeViewState.atStart,\n          _atTop = _computeViewState.atTop;\n\n      setAtBottom(_atBottom);\n      setAtEnd(_atEnd);\n      setAtStart(_atStart);\n      setAtTop(_atTop); // Chrome will emit \"synthetic\" scroll event if the container is resized or an element is added\n      // We need to ignore these \"synthetic\" events\n      // Repro: In playground, press 4-1-5-1-1 (small, add one, normal, add one, add one)\n      //        Nomatter how fast or slow the sequence is being pressed, it should still stick to the bottom\n\n      var nextOffsetHeight = target.offsetHeight,\n          nextScrollHeight = target.scrollHeight;\n      var offsetHeightChanged = nextOffsetHeight !== offsetHeight;\n      var scrollHeightChanged = nextScrollHeight !== scrollHeight;\n      offsetHeightChanged && setOffsetHeight(nextOffsetHeight);\n      scrollHeightChanged && setScrollHeight(nextScrollHeight); // Sticky means:\n      // - If it is scrolled programatically, we are still in sticky mode\n      // - If it is scrolled by the user, then sticky means if we are at the end\n      // Only update stickiness if the scroll event is not due to synthetic scroll done by Chrome\n\n      !offsetHeightChanged && !scrollHeightChanged && setSticky( // We are sticky if we are animating to the end, or we are already at the end.\n      // We can be \"animating but not sticky\" by calling \"scrollTo(100)\" where the container scrollHeight is 200px.\n      animating && isEnd(scrollTop, mode) || _atEnd); // If no scrollTop is set (not in programmatic scrolling mode), we should set \"animating\" to false\n      // \"animating\" is used to calculate the \"sticky\" property\n\n      scrollTop === null && setAnimating(false);\n      var actualScrollTop = target.scrollTop;\n      scrollPositionObserversRef.current.forEach(function (observer) {\n        return observer({\n          scrollTop: actualScrollTop\n        });\n      });\n    }\n  }, [animating, ignoreScrollEventBeforeRef, mode, offsetHeight, scrollHeight, scrollPositionObserversRef, scrollTop, setAnimating, setAtBottom, setAtEnd, setAtStart, setAtTop, setOffsetHeight, setScrollHeight, setSticky, target]);\n  var styleToClassName = (0, _react.useMemo)(function () {\n    var emotion = emotionPool[nonce] || (emotionPool[nonce] = (0, _createEmotion.default)({\n      key: \"react-scroll-to-bottom--css-\".concat((0, _createCSSKey.default)()),\n      nonce: nonce\n    }));\n    return function (style) {\n      return emotion.css(style) + '';\n    };\n  }, [nonce]);\n  var internalContext = (0, _react.useMemo)(function () {\n    return {\n      observeScrollPosition: observeScrollPosition,\n      offsetHeight: offsetHeight,\n      scrollHeight: scrollHeight,\n      setTarget: setTarget,\n      styleToClassName: styleToClassName\n    };\n  }, [observeScrollPosition, offsetHeight, scrollHeight, setTarget, styleToClassName]);\n  var animatingToEnd = animating && isEnd(scrollTop, mode);\n  var stateContext = (0, _react.useMemo)(function () {\n    return {\n      animating: animating,\n      animatingToEnd: animatingToEnd,\n      atBottom: atBottom,\n      atEnd: atEnd,\n      atStart: atStart,\n      atTop: atTop,\n      mode: mode,\n      sticky: sticky\n    };\n  }, [animating, animatingToEnd, atBottom, atEnd, atStart, atTop, mode, sticky]);\n  var functionContext = (0, _react.useMemo)(function () {\n    return {\n      scrollTo: scrollTo,\n      scrollToBottom: scrollToBottom,\n      scrollToEnd: scrollToEnd,\n      scrollToStart: scrollToStart,\n      scrollToTop: scrollToTop\n    };\n  }, [scrollTo, scrollToBottom, scrollToEnd, scrollToStart, scrollToTop]);\n  (0, _react.useEffect)(function () {\n    // We need to update the \"scrollHeight\" value to latest when the user do a focus inside the box.\n    //\n    // This is because:\n    // - In our code that mitigate Chrome synthetic scrolling, that code will look at whether \"scrollHeight\" value is latest or not.\n    // - That code only run on \"scroll\" event.\n    // - That means, on every \"scroll\" event, if the \"scrollHeight\" value is not latest, we will skip modifying the stickiness.\n    // - That means, if the user \"focus\" to an element that cause the scroll view to scroll to the bottom, the user agent will fire \"scroll\" event.\n    //   Since the \"scrollHeight\" is not latest value, this \"scroll\" event will be ignored and stickiness will not be modified.\n    // - That means, if the user \"focus\" to a newly added element that is at the end of the scroll view, the \"scroll to bottom\" button will continue to show.\n    //\n    // Repro in Chrome:\n    // 1. Fill up a scroll view\n    // 2. Scroll up, the \"scroll to bottom\" button should show up\n    // 3. Click \"Add a button\"\n    // 4. Click on the scroll view (to pseudo-focus on it)\n    // 5. Press TAB, the scroll view will be at the bottom\n    //\n    // Expect:\n    // - The \"scroll to bottom\" button should be gone.\n    if (target) {\n      var handleFocus = function handleFocus() {\n        return setScrollHeight(target.scrollHeight);\n      };\n\n      target.addEventListener('focus', handleFocus, {\n        capture: true,\n        passive: true\n      });\n      return function () {\n        return target.removeEventListener('focus', handleFocus);\n      };\n    }\n  }, [target]);\n  return /*#__PURE__*/_react.default.createElement(_InternalContext.default.Provider, {\n    value: internalContext\n  }, /*#__PURE__*/_react.default.createElement(_FunctionContext.default.Provider, {\n    value: functionContext\n  }, /*#__PURE__*/_react.default.createElement(_StateContext.default.Provider, {\n    value: stateContext\n  }, children, target && /*#__PURE__*/_react.default.createElement(_EventSpy.default, {\n    debounce: debounce,\n    name: \"scroll\",\n    onEvent: handleScroll,\n    target: target\n  }), target && scrollTop !== null && /*#__PURE__*/_react.default.createElement(_SpineTo.default, {\n    name: \"scrollTop\",\n    onEnd: handleScrollEnd,\n    target: target,\n    value: scrollTop\n  }))));\n};\n\nComposer.defaultProps = {\n  checkInterval: 100,\n  children: undefined,\n  debounce: 17,\n  mode: undefined,\n  nonce: undefined\n};\nComposer.propTypes = {\n  checkInterval: _propTypes.default.number,\n  children: _propTypes.default.any,\n  debounce: _propTypes.default.number,\n  mode: _propTypes.default.oneOf(['bottom', 'top']),\n  nonce: _propTypes.default.string\n};\nvar _default = Composer;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}