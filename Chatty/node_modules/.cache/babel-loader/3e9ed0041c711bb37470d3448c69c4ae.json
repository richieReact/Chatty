{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Adapter = void 0;\n\nconst events_1 = require(\"events\");\n\nclass Adapter extends events_1.EventEmitter {\n  /**\n   * In-memory adapter constructor.\n   *\n   * @param {Namespace} nsp\n   */\n  constructor(nsp) {\n    super();\n    this.nsp = nsp;\n    this.rooms = new Map();\n    this.sids = new Map();\n    this.encoder = nsp.server.encoder;\n  }\n  /**\n   * To be overridden\n   */\n\n\n  init() {}\n  /**\n   * To be overridden\n   */\n\n\n  close() {}\n  /**\n   * Adds a socket to a list of room.\n   *\n   * @param {SocketId}  id      the socket id\n   * @param {Set<Room>} rooms   a set of rooms\n   * @public\n   */\n\n\n  addAll(id, rooms) {\n    for (const room of rooms) {\n      if (!this.sids.has(id)) {\n        this.sids.set(id, new Set());\n      }\n\n      this.sids.get(id).add(room);\n\n      if (!this.rooms.has(room)) {\n        this.rooms.set(room, new Set());\n      }\n\n      this.rooms.get(room).add(id);\n    }\n  }\n  /**\n   * Removes a socket from a room.\n   *\n   * @param {SocketId} id     the socket id\n   * @param {Room}     room   the room name\n   */\n\n\n  del(id, room) {\n    if (this.sids.has(id)) {\n      this.sids.get(id).delete(room);\n    }\n\n    if (this.rooms.has(room)) {\n      this.rooms.get(room).delete(id);\n      if (this.rooms.get(room).size === 0) this.rooms.delete(room);\n    }\n  }\n  /**\n   * Removes a socket from all rooms it's joined.\n   *\n   * @param {SocketId} id   the socket id\n   */\n\n\n  delAll(id) {\n    if (!this.sids.has(id)) {\n      return;\n    }\n\n    for (const room of this.sids.get(id)) {\n      if (this.rooms.has(room)) {\n        this.rooms.get(room).delete(id);\n        if (this.rooms.get(room).size === 0) this.rooms.delete(room);\n      }\n    }\n\n    this.sids.delete(id);\n  }\n  /**\n   * Broadcasts a packet.\n   *\n   * Options:\n   *  - `flags` {Object} flags for this packet\n   *  - `except` {Array} sids that should be excluded\n   *  - `rooms` {Array} list of rooms to broadcast to\n   *\n   * @param {Object} packet   the packet object\n   * @param {Object} opts     the options\n   * @public\n   */\n\n\n  broadcast(packet, opts) {\n    const rooms = opts.rooms;\n    const except = opts.except || new Set();\n    const flags = opts.flags || {};\n    const packetOpts = {\n      preEncoded: true,\n      volatile: flags.volatile,\n      compress: flags.compress\n    };\n    const ids = new Set();\n    packet.nsp = this.nsp.name;\n    const encodedPackets = this.encoder.encode(packet);\n\n    if (rooms.size) {\n      for (const room of rooms) {\n        if (!this.rooms.has(room)) continue;\n\n        for (const id of this.rooms.get(room)) {\n          if (ids.has(id) || except.has(id)) continue;\n          const socket = this.nsp.sockets.get(id);\n\n          if (socket) {\n            socket.packet(encodedPackets, packetOpts);\n            ids.add(id);\n          }\n        }\n      }\n    } else {\n      for (const [id] of this.sids) {\n        if (except.has(id)) continue;\n        const socket = this.nsp.sockets.get(id);\n        if (socket) socket.packet(encodedPackets, packetOpts);\n      }\n    }\n  }\n  /**\n   * Gets a list of sockets by sid.\n   *\n   * @param {Set<Room>} rooms   the explicit set of rooms to check.\n   */\n\n\n  sockets(rooms) {\n    const sids = new Set();\n\n    if (rooms.size) {\n      for (const room of rooms) {\n        if (!this.rooms.has(room)) continue;\n\n        for (const id of this.rooms.get(room)) {\n          if (this.nsp.sockets.has(id)) {\n            sids.add(id);\n          }\n        }\n      }\n    } else {\n      for (const [id] of this.sids) {\n        if (this.nsp.sockets.has(id)) sids.add(id);\n      }\n    }\n\n    return Promise.resolve(sids);\n  }\n  /**\n   * Gets the list of rooms a given socket has joined.\n   *\n   * @param {SocketId} id   the socket id\n   */\n\n\n  socketRooms(id) {\n    return this.sids.get(id);\n  }\n\n}\n\nexports.Adapter = Adapter;","map":null,"metadata":{},"sourceType":"script"}