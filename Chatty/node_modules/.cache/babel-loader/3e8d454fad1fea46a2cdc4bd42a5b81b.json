{"ast":null,"code":"var _jsxFileName = \"/Users/richardchannell/Projects/Chatty/Chatty/src/components/containers/Data.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nimport ScrollToBottom from 'react-scroll-to-bottom';\nimport './Data.css';\n\nconst Data = () => {\n  const [yourID, setYourID] = useState();\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState([]);\n  const [username, setUsername] = useState([]);\n  const socketRef = useRef();\n  useEffect(() => {\n    socketRef.current = io.connect('/'); // Sets your ID on connection\n\n    socketRef.current.on(\"your id\", id => {\n      setYourID(id);\n    });\n    console.log(\"socket connection worked\");\n    socketRef.current.on(\"message\", message => {\n      recievedMessage(message);\n      console.log(message);\n    }); // Gets the messages from the database and sets my messages with them. Peep the concat.\n\n    fetch(\"/api/messages\", {\n      method: \"GET\"\n    }).then(res => {\n      return res.json();\n    }).then(resJSON => {\n      console.log(resJSON);\n      setMessages(resJSON.concat());\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []);\n\n  function recievedMessage(message) {\n    setMessages(oldMsgs => [...oldMsgs, message]);\n  }\n\n  function sendMessage(e) {\n    e.preventDefault(); // Props on this guy match up with the schema.\n\n    const messageObject = {\n      body: message,\n      username: username,\n      id: yourID\n    };\n    setMessage(\"\");\n    socketRef.current.emit(\"send message\", messageObject); // Sends the message to the database on submit. Uses the messageObject\n\n    fetch(\"/api/messages\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(messageObject)\n    }).then(res => {\n      return res.json();\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  function handleChange(e) {\n    setMessage(e.target.value);\n  }\n\n  function handleChangeUsername(e) {\n    setUsername(e.target.value);\n  }\n\n  return (\n    /*#__PURE__*/\n    //Send down the info, render the chat shit\n    React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(ScrollToBottom, {\n      className: \"Container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }\n    }, messages.map((message, index) => {\n      if (message.id === yourID) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"MyRow\",\n          key: index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(ScrollToBottom, {\n          className: \"MyMessage\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 17\n          }\n        }, message.body));\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: index,\n        style: {\n          justifyContent: 'flex-start'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(ScrollToBottom, {\n        className: \"PartnerMessage\",\n        id: \"DbMsgs\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 15\n        }\n      }, message.username, \":  \", message.body));\n    }))), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"Entry\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: sendMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      value: message,\n      onChange: handleChange,\n      placeholder: \"Say something...\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"Button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }\n    }))), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"UserEntry\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: sendMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      value: username,\n      onChange: handleChangeUsername,\n      placeholder: \"Your name...\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }\n    }))))\n  );\n};\n\nexport default Data;","map":{"version":3,"sources":["/Users/richardchannell/Projects/Chatty/Chatty/src/components/containers/Data.js"],"names":["React","useState","useEffect","useRef","io","ScrollToBottom","Data","yourID","setYourID","messages","setMessages","message","setMessage","username","setUsername","socketRef","current","connect","on","id","console","log","recievedMessage","fetch","method","then","res","json","resJSON","concat","catch","err","oldMsgs","sendMessage","e","preventDefault","messageObject","body","emit","headers","JSON","stringify","handleChange","target","value","handleChangeUsername","map","index","justifyContent"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nimport ScrollToBottom from 'react-scroll-to-bottom';\n\nimport './Data.css';\n\nconst Data = () => {\n\n  const [yourID, setYourID] = useState();\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState([]);\n  const [username, setUsername] = useState([]);\n\n  const socketRef = useRef();\n\n  useEffect(() => {\n    socketRef.current = io.connect('/');   \n    // Sets your ID on connection\n    socketRef.current.on(\"your id\", id => {\n      setYourID(id)\n    })\n    console.log(\"socket connection worked\")\n    socketRef.current.on(\"message\", (message) => {\n    recievedMessage(message);\n    console.log(message)\n    })\n    // Gets the messages from the database and sets my messages with them. Peep the concat.\n    fetch(\"/api/messages\", {\n      method: \"GET\",\n    }).then((res) => {\n      return res.json()\n    }).then((resJSON) => {\n      console.log(resJSON)\n      setMessages(resJSON.concat())\n    }).catch((err) => {\n      console.log(err)\n    });\n  }, []);\n\n    function recievedMessage(message) {\n      setMessages(oldMsgs => [...oldMsgs, message])\n    }\n      \n    function sendMessage(e) {\n      e.preventDefault();\n      // Props on this guy match up with the schema.\n      const messageObject = {\n          body: message,\n          username: username,\n          id: yourID\n    };\n      setMessage(\"\")\n      socketRef.current.emit(\"send message\", messageObject);\n      // Sends the message to the database on submit. Uses the messageObject\n      fetch(\"/api/messages\", {\n          method: \"POST\",\n          headers: {\n              \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(messageObject)\n      }).then((res) => {\n          return res.json();\n      }).catch((err) => {\n          console.log(err);\n      });\n    }\n\n    function handleChange(e) {\n      setMessage(e.target.value);\n    }\n\n    function handleChangeUsername(e) {\n      setUsername(e.target.value);\n    }\n\n  return (\n    //Send down the info, render the chat shit\n    <React.Fragment>\n    <div className=\"Page\">\n      <ScrollToBottom className=\"Container\">\n        {messages.map((message, index) => {\n          if (message.id === yourID) {\n            return (\n              <div className=\"MyRow\" key={index}>\n                <ScrollToBottom className=\"MyMessage\" >\n                  {message.body}\n                </ScrollToBottom>\n              </div>\n            )\n          }\n          return (\n            <div key={index} style={{ justifyContent: 'flex-start' }} >\n              <ScrollToBottom className=\"PartnerMessage\" id=\"DbMsgs\">\n                {message.username}:  {message.body}\n              </ScrollToBottom>\n            </div>\n            )\n          })}\n        </ScrollToBottom>\n      </div>\n\n            <span className=\"Entry\">\n                <form onSubmit={sendMessage}>\n                    <input \n                    value={message} \n                    onChange={handleChange} \n                    placeholder=\"Say something...\" />\n                    <button className=\"Button\" />\n                </form>\n            </span>\n\n            <span className=\"UserEntry\">\n              <form onSubmit={sendMessage}>\n                <input\n                    value={username}\n                    onChange={handleChangeUsername}\n                    placeholder=\"Your name...\" />\n              </form>\n            </span>\n        </React.Fragment>\n    )\n}  \n\nexport default Data;"]},"metadata":{},"sourceType":"module"}