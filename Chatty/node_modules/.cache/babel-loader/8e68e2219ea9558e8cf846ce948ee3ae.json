{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = require(\"react\");\n\nvar _debounce = _interopRequireDefault(require(\"./debounce\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar EventSpy = function EventSpy(_ref) {\n  var debounce = _ref.debounce,\n      name = _ref.name,\n      onEvent = _ref.onEvent,\n      target = _ref.target; // We need to save the \"onEvent\" to ref.\n  // This is because \"onEvent\" may change from time to time, but debounce may still fire to the older callback.\n\n  var onEventRef = (0, _react.useRef)();\n  onEventRef.current = onEvent;\n  var debouncer = (0, _react.useMemo)(function () {\n    return (0, _debounce.default)(function (event) {\n      var current = onEventRef.current;\n      current && current(event);\n    }, debounce);\n  }, [debounce, onEventRef]);\n  var handleEvent = (0, _react.useCallback)(function (event) {\n    event.timeStampLow = Date.now();\n    debouncer(event);\n  }, [debouncer]);\n  (0, _react.useLayoutEffect)(function () {\n    target.addEventListener(name, handleEvent, {\n      passive: true\n    });\n    handleEvent({\n      target: target,\n      type: name\n    });\n    return function () {\n      return target.removeEventListener(name, handleEvent);\n    };\n  }, [name, handleEvent, target]);\n  return false;\n};\n\nEventSpy.defaultProps = {\n  debounce: 200\n};\nvar _default = EventSpy;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}