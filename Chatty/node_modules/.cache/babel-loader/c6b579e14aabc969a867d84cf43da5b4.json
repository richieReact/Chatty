{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Client = void 0;\n\nconst socket_io_parser_1 = require(\"socket.io-parser\");\n\nconst debugModule = require(\"debug\");\n\nconst debug = debugModule(\"socket.io:client\");\n\nclass Client {\n  /**\n   * Client constructor.\n   *\n   * @param {Server} server instance\n   * @param {Socket} conn\n   * @package\n   */\n  constructor(server, conn) {\n    this.sockets = new Map();\n    this.nsps = new Map();\n    this.server = server;\n    this.conn = conn;\n    this.encoder = server.encoder;\n    this.decoder = new server._parser.Decoder();\n    this.id = conn.id;\n    this.setup();\n  }\n  /**\n   * @return the reference to the request that originated the Engine.IO connection\n   *\n   * @public\n   */\n\n\n  get request() {\n    return this.conn.request;\n  }\n  /**\n   * Sets up event listeners.\n   *\n   * @private\n   */\n\n\n  setup() {\n    this.onclose = this.onclose.bind(this);\n    this.ondata = this.ondata.bind(this);\n    this.onerror = this.onerror.bind(this);\n    this.ondecoded = this.ondecoded.bind(this); // @ts-ignore\n\n    this.decoder.on(\"decoded\", this.ondecoded);\n    this.conn.on(\"data\", this.ondata);\n    this.conn.on(\"error\", this.onerror);\n    this.conn.on(\"close\", this.onclose);\n    this.connectTimeout = setTimeout(() => {\n      if (this.nsps.size === 0) {\n        debug(\"no namespace joined yet, close the client\");\n        this.close();\n      } else {\n        debug(\"the client has already joined a namespace, nothing to do\");\n      }\n    }, this.server._connectTimeout);\n  }\n  /**\n   * Connects a client to a namespace.\n   *\n   * @param {String} name - the namespace\n   * @param {Object} auth - the auth parameters\n   * @private\n   */\n\n\n  connect(name, auth = {}) {\n    if (this.server._nsps.has(name)) {\n      debug(\"connecting to namespace %s\", name);\n      return this.doConnect(name, auth);\n    }\n\n    this.server._checkNamespace(name, auth, dynamicNsp => {\n      if (dynamicNsp) {\n        debug(\"dynamic namespace %s was created\", dynamicNsp.name);\n        this.doConnect(name, auth);\n      } else {\n        debug(\"creation of namespace %s was denied\", name);\n\n        this._packet({\n          type: socket_io_parser_1.PacketType.CONNECT_ERROR,\n          nsp: name,\n          data: {\n            message: \"Invalid namespace\"\n          }\n        });\n      }\n    });\n  }\n  /**\n   * Connects a client to a namespace.\n   *\n   * @param {String} name - the namespace\n   * @param {Object} auth - the auth parameters\n   *\n   * @private\n   */\n\n\n  doConnect(name, auth) {\n    if (this.connectTimeout) {\n      clearTimeout(this.connectTimeout);\n      this.connectTimeout = null;\n    }\n\n    const nsp = this.server.of(name);\n\n    const socket = nsp._add(this, auth, () => {\n      this.sockets.set(socket.id, socket);\n      this.nsps.set(nsp.name, socket);\n    });\n  }\n  /**\n   * Disconnects from all namespaces and closes transport.\n   *\n   * @private\n   */\n\n\n  _disconnect() {\n    for (const socket of this.sockets.values()) {\n      socket.disconnect();\n    }\n\n    this.sockets.clear();\n    this.close();\n  }\n  /**\n   * Removes a socket. Called by each `Socket`.\n   *\n   * @private\n   */\n\n\n  _remove(socket) {\n    if (this.sockets.has(socket.id)) {\n      const nsp = this.sockets.get(socket.id).nsp.name;\n      this.sockets.delete(socket.id);\n      this.nsps.delete(nsp);\n    } else {\n      debug(\"ignoring remove for %s\", socket.id);\n    }\n  }\n  /**\n   * Closes the underlying connection.\n   *\n   * @private\n   */\n\n\n  close() {\n    if (\"open\" == this.conn.readyState) {\n      debug(\"forcing transport close\");\n      this.conn.close();\n      this.onclose(\"forced server close\");\n    }\n  }\n  /**\n   * Writes a packet to the transport.\n   *\n   * @param {Object} packet object\n   * @param {Object} opts\n   * @private\n   */\n\n\n  _packet(packet, opts) {\n    opts = opts || {};\n    const self = this; // this writes to the actual connection\n\n    function writeToEngine(encodedPackets) {\n      if (opts.volatile && !self.conn.transport.writable) return;\n\n      for (let i = 0; i < encodedPackets.length; i++) {\n        self.conn.write(encodedPackets[i], {\n          compress: opts.compress\n        });\n      }\n    }\n\n    if (\"open\" == this.conn.readyState) {\n      debug(\"writing packet %j\", packet);\n\n      if (!opts.preEncoded) {\n        // not broadcasting, need to encode\n        writeToEngine(this.encoder.encode(packet)); // encode, then write results to engine\n      } else {\n        // a broadcast pre-encodes a packet\n        writeToEngine(packet);\n      }\n    } else {\n      debug(\"ignoring packet write %j\", packet);\n    }\n  }\n  /**\n   * Called with incoming transport data.\n   *\n   * @private\n   */\n\n\n  ondata(data) {\n    // try/catch is needed for protocol violations (GH-1880)\n    try {\n      this.decoder.add(data);\n    } catch (e) {\n      this.onerror(e);\n    }\n  }\n  /**\n   * Called when parser fully decodes a packet.\n   *\n   * @private\n   */\n\n\n  ondecoded(packet) {\n    if (socket_io_parser_1.PacketType.CONNECT == packet.type) {\n      this.connect(packet.nsp, packet.data);\n    } else {\n      const socket = this.nsps.get(packet.nsp);\n\n      if (socket) {\n        process.nextTick(function () {\n          socket._onpacket(packet);\n        });\n      } else {\n        debug(\"no socket for namespace %s\", packet.nsp);\n      }\n    }\n  }\n  /**\n   * Handles an error.\n   *\n   * @param {Object} err object\n   * @private\n   */\n\n\n  onerror(err) {\n    for (const socket of this.sockets.values()) {\n      socket._onerror(err);\n    }\n\n    this.conn.close();\n  }\n  /**\n   * Called upon transport close.\n   *\n   * @param reason\n   * @private\n   */\n\n\n  onclose(reason) {\n    debug(\"client close with reason %s\", reason); // ignore a potential subsequent `close` event\n\n    this.destroy(); // `nsps` and `sockets` are cleaned up seamlessly\n\n    for (const socket of this.sockets.values()) {\n      socket._onclose(reason);\n    }\n\n    this.sockets.clear();\n    this.decoder.destroy(); // clean up decoder\n  }\n  /**\n   * Cleans up event listeners.\n   * @private\n   */\n\n\n  destroy() {\n    this.conn.removeListener(\"data\", this.ondata);\n    this.conn.removeListener(\"error\", this.onerror);\n    this.conn.removeListener(\"close\", this.onclose); // @ts-ignore\n\n    this.decoder.removeListener(\"decoded\", this.ondecoded);\n  }\n\n}\n\nexports.Client = Client;","map":null,"metadata":{},"sourceType":"script"}